import pandas as pd

sell_treat = {
    'A0005': {'核心购物类': '购物车商品降价提醒'},
    'A0006': {'核心购物类': '购物车商品满减活动提醒'},
    'A0007': {'核心购物类': '购物车商品领券提醒'},
    'A0008': {'核心购物类': '购物车商品到货通知'},
    'B0011': {'生命周期类': '新人礼包未领取第4天场景'},
    'B0012': {'生命周期类': '新人礼包未领取第7天场景'},
    'B0013': {'生命周期类': '新人礼包未领取第15天场景'},
    'B0014': {'生命周期类': '新人礼包未使用第3天场景'},
    'C0004': {'会员权益类': '小额云钻过期提醒（月度事件，每月5号发送）'},
    'C0005': {'会员权益类': '大额云钻过期提醒（月度事件，每月5号发送）'},
    'C0017': {'会员权益类': '打卡次日提醒'},
    'C0018': {'会员权益类': '3天未打卡提醒'},
    'C0019': {'会员权益类': '周末打卡提醒'},
    'C0021': {'会员权益类': '打卡日度拉新'},
    'C0022': {'会员权益类': '打卡月度拉新（月度事件，每月2号发送）'},
    'C0023': {'会员权益类': '打卡满勤拉新（月度事件，每月3号发送'},
    'C0024': {'会员权益类': '打卡月度拉新（月度事件，每月4号发送'},
    'C0025': {'会员权益类': '等级升级提醒_V1'},
    'C0026': {'会员权益类': '等级升级提醒_V2'},
    'C0027': {'会员权益类': '等级升级提醒_V3'},
    'C0028': {'会员权益类': '等级升级提醒_V4'},
    'C0033': {'会员权益类': '打卡次日提醒-晚'},
    'C0034': {'会员权益类': '3天未打卡提醒-晚'},
    'C0035': {'会员权益类': '周末未打卡提醒-晚'},
    'C0036': {'会员权益类': '连续7天奖提醒-早'},
    'C0037': {'会员权益类': '连续7天奖提醒-晚'},
    'C0038': {'会员权益类': '积分变动通知'},
    'C0039': {'会员权益类': 'super会员试用期到期前3天提醒'},
    'C0040': {'会员权益类': 'super云钻≥3000清零前7天提醒'},
    'C0041': {'会员权益类': '特卖退货返券10元'},
    'C0042': {'会员权益类': '特卖退货返券20元'},
    'C0046': {'会员权益类': '试用结束前3天&云钻＜3000且过去一年消费＜6000'},
    'C0047': {'会员权益类': '试用结束前3天&云钻＜3000且过去一年消费＞6000'},
    'C0048': {'会员权益类': '试用过期后3天且产生的待返云钻额度≥3000'},
    'C0049': {'会员权益类': '试用过期后30天且产生的待返云钻额度≥3000'},
    'C0050': {'会员权益类': 'Super会员周度积分账单短信提醒'},
    'D0001': {'金融类': '延保'},
    'E0003': {'优惠券类': '券生效提醒'},
    'E0004': {'优惠券类': '券过期提醒'},
    'G0001': {'商户赋能': '店铺发券提醒'},
    'G0002': {'商户赋能': '店铺上新'},
    'H0001': {'客户端拉新': '门店推荐app下载-未收货'},
    'H0002': {'客户端拉新': '门店推荐app下载-已收货'},
    'H0003': {'客户端拉新': 'PC/WAP推荐app下载-未收货'},
    'H0004': {'客户端拉新': 'PC/WAP推荐app下载-已收货'},
    'H0015': {'客户端拉新': '门店8点前下订单（现货自提）'},
    'H0016': {'客户端拉新': '门店8-10点下订单（现货自提）'},
    'H0017': {'客户端拉新': '门店10-12点下订单（现货自提）'},
    'H0018': {'客户端拉新': '门店12-14点下订单（现货自提）'},
    'H0019': {'客户端拉新': '门店14-16点下订单（现货自提）'},
    'H0020': {'客户端拉新': '门店16-18点下订单（现货自提）'},
    'H0021': {'客户端拉新': '门店18-20点下订单（现货自提）'},
    'H0022': {'客户端拉新': '门店8点前下订单（预约自提）'},
    'H0023': {'客户端拉新': '门店8-10点下订单（预约自提）'},
    'H0024': {'客户端拉新': '门店10-12点下订单（预约自提）'},
    'H0025': {'客户端拉新': '门店12-14点下订单（预约自提）'},
    'H0026': {'客户端拉新': '门店14-16点下订单（预约自提）'},
    'H0027': {'客户端拉新': '门店16-18点下订单（预约自提）'},
    'H0029': {'客户端拉新': '智能家居APP引流拉新'},
    'I0001': {'苏宁小店优惠券': '苏宁小店券到账'},
    'I0002': {'苏宁小店优惠券': '苏宁小店券过期'},
    'I0003': {'苏宁小店优惠券': '苏宁小店券生效'},
    'J0001': {'频道推荐': '乐拼购自动化推荐'},
    'J0003': {'频道推荐': '常购清单-降价'},
    'J0005': {'频道推荐': '母婴权益发券'},
}

Channel = {
    '短信': {'发送成功会员数': '计划发送会员数', '打开会员数': '计划发送会员数', '买家数': '买家1', '付款金额': '付款1'},
    '站内信': {'发送成功会员数': '计划发送会员数', '打开会员数': '打开会员数', '买家数': '买家3', '付款金额': '付款3'},
    '邮件': {'发送成功会员数': '发送成功会员数', '打开会员数': '打开会员数', '买家数': '买家3', '付款金额': '付款3'},
    'APP PUSH': {'发送成功会员数': '发送成功会员数', '打开会员数': '打开会员数', '买家数': '买家3', '付款金额': '付款3'},
    '消息中心': {'发送成功会员数': '发送成功会员数', '打开会员数': '打开会员数', '买家数': '买家3', '付款金额': '付款3'},
    '微信': {'发送成功会员数': '发送成功会员数', '打开会员数': '打开会员数', '买家数': '买家3', '付款金额': '付款3'},
}


class DataClean(object):
    def __init__(self, path):
        self.path = path

    def data_clean(self):
        # 读取文件路径至pandas转换为dataframe
        read_df = pd.read_excel(self.path, sheetname=None)
        # 选取excel表中需要的字段
        df = read_df['Sheet1'][['渠道', '发送日期', '活动编号', '计划发送会员数', '发送成功会员数', '买家数1', '买家数3', '付款金额1', '付款金额3', '打开会员数']]
        # 把datafrmae字符串化
        df_to_str = df.astype(str)

        # 找到活动编号这一列中所有包含'M1'字符的数据
        contain_M1 = df_to_str[df_to_str['活动编号'].str.contains('M1')]
        # print(contain_M1)

        # 把所有包含'M1'字符的数据的活动编号列转换成list
        contain_M1_list = list(contain_M1.活动编号)
        # print(contain_M1_list)

        # 把字符串化后的原数据中活动编号列整体转换成list
        act_num_list = list(df_to_str.活动编号)
        # print(act_num_list)

        # 把act_num_list和contain_M1_list利用set各自去重，然后进行异或运算得出去除包含'M1'字段的所有数据
        '''
        异或运算：e.g.
        L1 = [1, 2]
        L2 = [1]
        print(list(set(L1) ^ set(L2))) -> [2]
        
        L1 = [1, 2]
        L2 = [1, 2]
        print(list(set(L1) ^ set(L2))) -> []
        
        L1 = [1, 2]
        L2 = []
        print(list(set(L1) ^ set(L2))) -> [1, 2]
        
        L1 = [1, 2]
        L2 = [3]
        print(list(set(L1) ^ set(L2))) -> [1, 2, 3]
        '''
        df_remove_M1 = list(set(act_num_list) ^ set(contain_M1_list))
        # print(df_remove_M1)

        # 只选取活动编号在df_remove_M1中的所有数据（也就是成功的删除了所有包含'M1'字段的数据）
        df = df_to_str[df_to_str.活动编号.isin(df_remove_M1)]
        # 对处理后的dataframe重新索引（删除一些数据，索引可能出错，比如出现0，1，2，3，12，13这样的断点）
        df = df.reset_index(drop=True)

        # 得到数据的列长度
        column_length = len(list(df['活动编号']))
        count = 0
        # 循环处理每一行数据
        while count < column_length:
            # 剔除每行数据中活动编号下划线后面的日期, 比如 C0011_20180517 -> C0011
            df['活动编号'][count] = df['活动编号'][count].split('_')[0]
            count += 1

        return self.output_prepare(df)

    @staticmethod
    # 按照活动编号取类别
    def category(act_num):
        # 循环遍历所有营销策略
        for i in sell_treat:
            # 如果活动编号和营销策略策略中一样
            if act_num == i:
                # 取出营销策略的类别，比如'A0005' -> '核心购物类'
                for k, v in sell_treat[i].items():
                    return k

    @staticmethod
    # 按照活动编号取场景
    def scenes(act_num):
        # 循环遍历所有营销策略
        for i in sell_treat:
            # 如果活动编号和营销策略策略中一样
            if act_num == i:
                # 取出营销策略的类别，比如'A0005' -> '购物车商品降价提醒'
                for k, v in sell_treat[i].items():
                    return v

    @staticmethod
    # 按照活动渠道取发送成功会员数
    def send_user(channel):
        # 循环遍历所有营销策略渠道
        for i in Channel:
            # 如果渠道和营销策略策略中一样
            if channel == i:
                # 取出营销策略的类别，比如'短信'对应'发送成功会员数': '计划发送会员数'
                column_data = Channel[i].get('买家数')
                return Channel[i].get('买家数')

    @staticmethod
    # 按照活动渠道取发送成功会员数
    def buyer(channel):
        # 循环遍历所有营销策略渠道
        for i in Channel:
            # 如果渠道和营销策略策略中一样
            if channel == i:
                # 取出营销策略的类别，比如'短信'对应'发送成功会员数': '计划发送会员数'
                return Channel[i].get('发送成功会员数')

    @staticmethod
    def paymoney(channel):
        # 循环遍历所有营销策略渠道
        for i in Channel:
            # 如果渠道和营销策略策略中一样
            if channel == i:
                # 取出营销策略的类别，比如'短信'对应'发送成功会员数': '计划发送会员数'
                return Channel[i].get('付款金额')

    @staticmethod
    def openuser(channel):
        # 循环遍历所有营销策略渠道
        for i in Channel:
            # 如果渠道和营销策略策略中一样
            if channel == i:
                # 取出营销策略的类别，比如'短信'对应'发送成功会员数': '计划发送会员数'
                return Channel[i].get('打开会员数')

    def output_prepare(self, df):
        df['类别'] = df['活动编号'].map(self.category)
        df['场景'] = df['活动编号'].map(self.scenes)
        df['发送成功会员数'] = df['渠道'].map(self.send_user)
        df['买家数'] = df['渠道'].map(self.buyer)
        df['付款金额'] = df['渠道'].map(self.paymoney)
        df['打开会员数'] = df['渠道'].map(self.openuser)
        print(df)
        return df

    def delete_column(self):
        pass


if __name__ == '__main__':
    excel_path = '/Users/chandler/Documents/Data/suning/baobiao/dirty_data.xlsx'
    data_clean = DataClean(path=excel_path)
    df = data_clean.data_clean()
    # df.to_excel('/Users/chandler/Documents/Data/suning/baobiao/test.xlsx', sheet_name='Sheet1')
